======================== VÀI LỆNH CƠ BẢN ===========================


git init : Khởi tạo thư mục git trong folder 

git add <fileName> : đưa file vào staged ( trước khi đưa vào thư mục git ) ( add tất cả thì git add . )

git commit : add vào cơ sở dữ liệu .git
	git commit -m "<message>"

git log : xem thông tin các commit ( mã commit, tác giả, ngày, message, nhánh )

git log --oneline : tương tự trên nhưng vắn tắt hơn ( <mã commit> <message>, và tên nhánh )

git status : kiểm tra trạng thái các file ( so với commit cuối )

git restore <fileName> : sau khi xoá 1 file, muốn phục hồi lại file đó từ commit cuối thì dùng lệnh này ( phục hồi tất cả thì git restore . )

git diff : sau khi chỉnh sữa file, so sánh sự thay đổi giữa 2 trường hợp ( sẽ có trường hợp a và b )
	- STAGED có dữ liệu : so sánh thư mục làm việc với STAGED
	- STAGED KHÔNG có dữ liệu : so sánh thư mục làm việc với commit cuối

git checkout <mã commit> -- <fileName> : phục hồi lại file nào đó từ commit mình muốn thông qua mã commit
	- sau khi phục hồi file thì file đó đã ở nằm trong vùng staged, nghĩa là chi đợi commit
	- phục hồi lại về commit cuối thì không cần có mã commit

git restore --staged <file> : đem file đó ra khỏi vùng staged sau khi phục hồi

------------------------------------------------------------------------


============================== GIT IGNORE ==============================
- Mục đích : những file trong đây sẽ không được git theo dõi
1) tạo file .gitignore
2) thêm những file cần ignore vào gitignore
3) đưa gitignore vào staged và commit

* nếu commit thay đổi ít và không muốn tạo ra commit mới => ghi đè lên commit cuối và sửa lại message bằng cách : 

git commit --amend -m "<message>"

------------------------------------------------------------------------




=========================== LỆNH RESET UNDO ======================

git reset : undo commit hoặc staging
	git reset --soft HEAD~1 : xoá commit cuối, nhưng nội dung không bị xoá hẳn mà chuyển vào vùng staged
	git reset --hard HEAD~1 : xoá commit cuối, và không đưa nội dung vào staged

git reset --staged <fileName> : đưa các file ra vùng staged

git reset -- <fileName> : sau khi đưa vào vùng staged ( chưa commit ) , ta sửa file đó, muốn nó quay lại là file trong staged thì dùng lệnh này

------------------------------------------------------------------------


======================== NHÁNH BRANCH =============================

khi dùng lệnh git init, sẽ tự động tạo nhánh master

git branch : xem các nhánh hiện có và mình đang ở nhánh nào

git branch <branchName> : tạo ra nhánh mới, sau khi tạo, nhánh mới sẽ trỏ vào commit mà HEAD đang trỏ đến trên nhánh hiện tại.

git checkout <branchName> : chuyển sang nhánh mình muốn => thư mục làm việc sẽ = commit cuối của nhánh vừa chuyển qua

git switch <branchName> : tương tự trên

git merge <branchName> : ví dụ đang ở nhánh master, branchName = tên 1 nhánh khác, sẽ thực hiện việc gộp nhánh đó vào nhánh master

git branch -d <branchName> : xoá nhánh ( thường làm sau khi gộp 2 nhánh )

git log --oneline --graph : xem sơ đồ commit

khi bị conflict, sử dụng :

1) git mergetool
2) nhấn return để vào vdiff
3) sử dụng 1 trong 3 lệnh :
	+ diffg LO (local) : để giữ nội dung sửa đổi của file nhánh hiện tại
	+ diffg RE (remote) : để giữ nội dung sửa đổi của file muốn gộp vào
	+ diffg BA (base) : giữ nội dung gốc lúc cả 2 chưa có commit mới ( chưa sửa )


* CÁCH GỘP NHÁNH KHÁC * GIT REBASE

- nói 1 cách đơn giản dễ hiểu là : nó sẽ gộp thằng cần gộp vào cái commit đầu tiên khác nhau của nhánh kia
ví dụ : B1 <- B2
và có 1 nhánh khác là D1 <- D2
giờ gộp D1 <- D2 vào B1 <- B2 thì sẽ trở thành D1 <- D2 <- B1' ( buộc phải sửa tên ) <- B2


- sử dụng git rebase nếu như muốn các sự thay đổi thuộc về branch của mình luôn luôn là mới nhất
- sử dụng git merge nếu muốn sắp xếp các commit theo mặc định
ví dụ : 
	git checkout main # chuyển sang nhánh main
	git rebase beta # gộp beta vào main => commit cuối của main là commit cao nhất



